"main";let geocode;_9d0‍.w("./utils/geocode.mjs",[["default",function(v){geocode=v}]]);let forecast;_9d0‍.w("./utils/forecast.mjs",[["default",function(v){forecast=v}]]);let request;_9d0‍.w("request",[["default",function(v){request=v}]]);let chalk;_9d0‍.w("chalk",[["default",function(v){chalk=v}]]);





const darkskyURL = 'https://api.darksky.net/forecast/3689980556a03b0b346815ebeb9228b6/37.8267,-122.4233?units=si&lang=pt'

const geocodeURL = 'https://api.mapbox.com/geocoding/v5/mapbox.places/Chapada%20Diamantina.json?access_token=pk.eyJ1IjoieXVyaWlwb3F1aW5pIiwiYSI6ImNqemx6MHh1bDA0NzYzbG10cmlka2puNWEifQ.V0TVYS_Hzf4qJUiruJZGFA&limit=1'

// request({ url: darkskyURL, json: true }, (error, response) => {

//     if (error) {
//         console.log('Unable to connect to weather service');
//     } else if (response.body.error) {
//         console.log('Unable to find location');
//     } else {
//         const bodyCurrently = response.body.currently;

//         console.log(response.body.daily.data[0].summary + ' It is currently ' + bodyCurrently.temperature + ' degress out and there is a ' + bodyCurrently.precipIntensity + '% chance of rain');
//     }
// });


//
// Goal: Create a reusable function for getting the forecast
//
// 1. Setup the "forecast" function in utils/forecast.js
// 2. Require the function in app.js and call it as shown below
// 3. The forecast function should have three potential calls to callback:
//    - Low level error, pass string for error
//    - Coordinate error, pass string for error
//    - Success, pass forecast string for data (same format as from before)


geocode('Ibiúna', (error, data) => {
    console.log('Error:', error);
    console.log('Data:', data);

    forecast(data.latitude, data.longitude, (nError, nData) => {
        console.log('Error:', nError);
        console.log('Data:', nData);
    })
})

